class Solution {
public:
    int minimizeSet(int divisor1, int divisor2, int uniqueCnt1, int uniqueCnt2) {
        long long l=1, r=1e15, a=r, d1=divisor1, d2=divisor2, c1=uniqueCnt1, c2=uniqueCnt2;
        long long gcf=__gcd(d1,d2), lcm=(d1*d2)/gcf;
        while(l<=r){
            long long mid=(l+r)/2;
            if(d1==d2){
                long long c=mid-(mid/d1);
                if(c>=c1+c2){
                    a=mid;
                    r=mid-1;
                }
                else l=mid+1;
            }
        
            else{
              long long c=(mid/lcm);
              long long cnt1=(mid/d1)-c, cnt2=(mid/d2)-c;
              long long remain=mid-(cnt1+cnt2+c);
              long long m1=c1,m2=c2;
              m1-=min(cnt2,m1);
              m2-=min(cnt1,m2);
              if(m1+m2<=remain){
                  a=mid;
                  r=mid-1;
              }
              else{
                  l=mid+1;
              }
              
            }
        }
        return a;
    }
};
